// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, title, content, category, tags, createdAt, updatedAt)
VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, title, content, category, tags, createdat, updatedat
`

type CreatePostParams struct {
	Title    string
	Content  string
	Category string
	Tags     []string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.Category,
		pq.Array(arg.Tags),
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, content, category, tags, createdat, updatedat FROM posts
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, content, category, tags, createdat, updatedat FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			pq.Array(&i.Tags),
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByTerm = `-- name: GetPostsByTerm :many
SELECT id, title, content, category, tags, createdat, updatedat FROM posts
WHERE title ILIKE $1
OR content ILIKE $1
OR category ILIKE $1
`

func (q *Queries) GetPostsByTerm(ctx context.Context, title string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByTerm, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			pq.Array(&i.Tags),
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts 
SET updatedAt = NOW(), title = $1, content = $2, category = $3, tags = $4
WHERE id = $5
RETURNING id, title, content, category, tags, createdat, updatedat
`

type UpdatePostParams struct {
	Title    string
	Content  string
	Category string
	Tags     []string
	ID       uuid.UUID
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.Category,
		pq.Array(arg.Tags),
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		pq.Array(&i.Tags),
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
